"""update_user_table

Revision ID: 65c22c0f93f0
Revises: de22b839f764
Create Date: 2025-06-02 20:54:20.618694

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "65c22c0f93f0"
down_revision: Union[str, None] = "de22b839f764"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("applications")
    op.drop_index("ix_clients_client_id", table_name="clients")
    op.drop_index("ix_clients_mentor_id", table_name="clients")
    op.drop_table("clients")
    op.drop_index("ix_tasks_client_id", table_name="tasks")
    op.drop_index("ix_tasks_mentor_id", table_name="tasks")
    op.drop_table("tasks")
    op.add_column("users", sa.Column("job_title", sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "job_title")
    op.create_table(
        "tasks",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("test_title", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("test_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("mentor_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("is_complete", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["mentor_id"], ["users.id"], name="tasks_mentor_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="tasks_pkey"),
    )
    op.create_index("ix_tasks_mentor_id", "tasks", ["mentor_id"], unique=False)
    op.create_index("ix_tasks_client_id", "tasks", ["client_id"], unique=False)
    op.create_table(
        "clients",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("mentor_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["users.id"],
            name="clients_client_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["mentor_id"],
            ["users.id"],
            name="clients_mentor_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="clients_pkey"),
    )
    op.create_index("ix_clients_mentor_id", "clients", ["mentor_id"], unique=False)
    op.create_index("ix_clients_client_id", "clients", ["client_id"], unique=False)
    op.create_table(
        "applications",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("manager_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "inquiry",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("text", sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
        sa.Column("status", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["client_id"], ["users.id"], name="applications_client_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["manager_id"], ["users.id"], name="applications_manager_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="applications_pkey"),
    )
    # ### end Alembic commands ###
